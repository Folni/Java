/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Person;
import hr.algebra.model.PersonSelectable;
import hr.algebra.model.PersonTransferable;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.SelectionModeModel;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;

/**
 *
 * @author filip
 */
public class PeopleDragAndDrop extends javax.swing.JDialog {

    private final PersonSelectable personSelectable;
    private final Set<Person> people = new TreeSet<>();
    private final Set<Person> allPeople = new TreeSet<>();

    private final DefaultListModel<Person> peopleModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allPeopleModel = new DefaultListModel<>();

    /**
     * Creates new form PeopleDragAndDrop
     */
    private final List<Person> creators;
    private Repository repository;

    public PeopleDragAndDrop(java.awt.Frame parent, boolean modal, PersonSelectable personSelectable, List<Person> creators) throws Exception {
        super(parent, modal);
        initComponents();
        initRepository();
        initDragAndDrop();
        cbMode.setModel(new javax.swing.DefaultComboBoxModel<>(SelectionModeModel.values()));
        this.personSelectable = personSelectable;
        this.creators = creators;
        people.addAll(creators);
        allPeople.addAll(repository.selectPeople());
        loadAllPeopleModel();
        loadPeopleModel();
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsSelected = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsPeople = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        cbMode = new javax.swing.JComboBox<>();
        btnExit = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("List of people :");

        jLabel2.setText("Selected :");

        jScrollPane1.setViewportView(lsSelected);

        jScrollPane2.setViewportView(lsPeople);

        jLabel3.setText("Selection mode :");

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                        .addComponent(cbMode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(117, 117, 117)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(cbMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConfirm)
                        .addGap(44, 44, 44)
                        .addComponent(btnExit)
                        .addGap(131, 131, 131)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initDragAndDrop() {
        lsPeople.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsPeople.setDragEnabled(true);
        lsPeople.setTransferHandler(new ExportHandler());

        lsSelected.setDropMode(DropMode.ON);
        lsSelected.setTransferHandler(new ImportHandler());
    }

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed

        ArrayList<Person> peopleToPass = new ArrayList<>();
        DefaultListModel<Person> model = (DefaultListModel<Person>) lsSelected.getModel(); // Cast to your model type

        for (int i = 0; i < model.getSize(); i++) {
            peopleToPass.add(model.getElementAt(i));
        }


        if (personSelectable.selectPerson(peopleToPass)) { 
            dispose();
        } else {
            MessageUtils.showInformationMessage("Info", "Failed to load.");
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnExit;
    private javax.swing.JComboBox<SelectionModeModel> cbMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Person> lsPeople;
    private javax.swing.JList<Person> lsSelected;
    // End of variables declaration//GEN-END:variables

    private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);

                if (people.add(data)) {
                    if (cbMode.getSelectedItem() == SelectionModeModel.CREATOR) {
                        people.clear();
                        people.add(data);
                    }
                    loadPeopleModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(PeopleDragAndDrop.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class ExportHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsPeople.getSelectedValue());
        }

    }

    private void loadPeopleModel() {
        peopleModel.clear();
        people.forEach(peopleModel::addElement);
        lsSelected.setModel(peopleModel);
    }

    private void loadAllPeopleModel() {
        allPeopleModel.clear();
        allPeople.forEach(allPeopleModel::addElement);
        lsPeople.setModel(allPeopleModel);
    }
}
