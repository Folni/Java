/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.ArticleManager;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Article;
import hr.algebra.model.ArticleArchive;
import hr.algebra.model.Person;
import hr.algebra.model.PersonSelectable;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.ArticleTableModel;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;
import javax.xml.bind.JAXBException;

/**
 *
 * @author filip
 */
public class EditArticlesPanel extends javax.swing.JPanel implements PersonSelectable {

    /**
     * Creates new form UploadArticlesPanel
     */
    private ArticleManager manager;

    public EditArticlesPanel(ArticleManager manager) {
        this.manager = manager;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuSelectPeople = new javax.swing.JPopupMenu();
        miSelect = new javax.swing.JMenuItem();
        miExport = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbArticles = new javax.swing.JTable();
        lbIcon = new javax.swing.JLabel();
        btnChoose = new javax.swing.JButton();
        tfPicturePath = new javax.swing.JTextField();
        lbPicturePathError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbTitleError = new javax.swing.JLabel();
        lbLinkError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        lbDateError = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfPublishDate = new javax.swing.JTextField();
        lbCreatorError = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tfCreator = new javax.swing.JTextField();
        lbContributorsError = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tfContributors = new javax.swing.JTextField();
        lbDescriptionError = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lbContentError = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        taContent = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();

        miSelect.setText("Select people");
        miSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSelectActionPerformed(evt);
            }
        });
        menuSelectPeople.add(miSelect);

        miExport.setText("Export");
        miExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExportActionPerformed(evt);
            }
        });
        menuSelectPeople.add(miExport);

        setComponentPopupMenu(menuSelectPeople);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbArticles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbArticles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbArticlesMouseClicked(evt);
            }
        });
        tbArticles.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbArticlesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbArticles);

        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        tfPicturePath.setEditable(false);

        lbPicturePathError.setForeground(new java.awt.Color(255, 0, 51));
        lbPicturePathError.setText("X");

        jLabel3.setText("Title");

        lbTitleError.setForeground(new java.awt.Color(255, 0, 0));
        lbTitleError.setText("X");

        lbLinkError.setForeground(new java.awt.Color(255, 0, 0));
        lbLinkError.setText("X");

        jLabel6.setText("Link");

        lbDateError.setForeground(new java.awt.Color(255, 0, 0));
        lbDateError.setText("X");

        jLabel8.setText("Publish date");

        tfPublishDate.setName("DATE"); // NOI18N

        lbCreatorError.setForeground(new java.awt.Color(255, 0, 0));
        lbCreatorError.setText("X");

        jLabel10.setText("Creator");

        lbContributorsError.setForeground(new java.awt.Color(255, 0, 0));
        lbContributorsError.setText("X");

        jLabel12.setText("Contributors");

        lbDescriptionError.setForeground(new java.awt.Color(255, 0, 0));
        lbDescriptionError.setText("X");

        jLabel14.setText("Description");

        lbContentError.setForeground(new java.awt.Color(255, 0, 0));
        lbContentError.setText("X");

        jLabel18.setText("Content");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        taContent.setColumns(20);
        taContent.setLineWrap(true);
        taContent.setRows(5);
        jScrollPane2.setViewportView(taContent);

        jScrollPane3.setWheelScrollingEnabled(false);

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane3.setViewportView(taDescription);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(84, 84, 84)
                                    .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lbLinkError))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(455, 455, 455)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(455, 455, 455))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(84, 84, 84)
                                    .addComponent(tfPublishDate, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lbDateError)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(455, 455, 455))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(84, 84, 84)
                                    .addComponent(tfCreator, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lbCreatorError)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(455, 455, 455))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(84, 84, 84)
                                    .addComponent(tfContributors, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lbContributorsError)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane3))
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbDescriptionError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lbContentError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnAdd)
                                .addGap(62, 62, 62)
                                .addComponent(btnUpdate)
                                .addGap(55, 55, 55)
                                .addComponent(btnDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbPicturePathError)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(18, 18, 18)
                        .addComponent(btnChoose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbTitleError))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbLinkError))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfPublishDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbDateError))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfCreator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbCreatorError))
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfContributors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbContributorsError))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDescriptionError)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnChoose)
                                    .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbPicturePathError)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbContentError)
                        .addGap(175, 175, 175))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!formValid()) {
            System.out.println("Error");
            return;
        }

        try {
            String localPath = uploadPicture();

            /*Creator check*/
            Person creator = new Person();
            String fullName = tfCreator.getText().trim();
            String[] nameParts = fullName.split(" ");

            if (nameParts.length >= 2) {
                String inputName = nameParts[0];
                String inputSurname = nameParts[1];

                List<Person> people = repository.selectPeople();

                for (Person person : people) {
                    if (person.getName().equalsIgnoreCase(inputName)
                            && person.getSurname().equalsIgnoreCase(inputSurname)) {
                        creator = person;
                        break;
                    } else {
                        Person newPerson = new Person(inputName, inputSurname);
                        int idPerson = repository.createPerson(newPerson);
                        newPerson.setId(idPerson);
                        creator = newPerson;
                    }
                }
            }

            Article article = new Article(
                    tfTitle.getText().trim(),
                    tfLink.getText().trim(),
                    taDescription.getText().trim(),
                    LocalDateTime.parse(
                            tfPublishDate.getText().trim(),
                            Article.DATE_FORMATTER
                    ),
                    creator,
                    localPath,
                    taContent.getText().trim()
            );

            int idA = repository.createArticle(article);
            article.setId(idA);
            /*Contributor check*/
            String contributorsText = tfContributors.getText().trim();
            List<Person> existingContributors = new ArrayList<>();
            List<Person> newContributors = new ArrayList<>();
            List<Integer> contributorIds = new ArrayList<>();

            if (!contributorsText.isEmpty()) {
                String[] names = contributorsText.split(", ");

                List<Person> peopleInDb = repository.selectPeople();

                for (String full_Name : names) {
                    String[] parts = full_Name.trim().split(" ");
                    if (parts.length >= 2) {
                        String name = parts[0];
                        String surname = parts[1];

                        Optional<Person> match = peopleInDb.stream()
                                .filter(p -> p.getName().equalsIgnoreCase(name)
                                && p.getSurname().equalsIgnoreCase(surname))
                                .findFirst();

                        if (match.isPresent()) {
                            existingContributors.add(match.get());
                        } else {
                            newContributors.add(new Person(name, surname));
                        }
                    } else {
                        System.err.println("Invalid contributor name: " + full_Name);
                    }
                }

                List<Integer> newContributorIds = repository.createPeople(newContributors);

                contributorIds.addAll(
                        existingContributors.stream()
                                .map(Person::getId)
                                .collect(Collectors.toList())
                );
                contributorIds.addAll(newContributorIds);
                repository.insertArticleContributor(article.getId(), contributorIds);
            }

            List<Person> finalContributors = new ArrayList<>();

            for (Integer id : contributorIds) {
                repository.selectPerson(id).ifPresent(finalContributors::add);
            }

            article.setContributors(finalContributors);
            model.setArticles(repository.selectArticles());
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        Optional<File> optionalFile = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");

        if (optionalFile.isEmpty()) {
            return;
        }

        File file = optionalFile.get();
        tfPicturePath.setText(file.getAbsolutePath());
        setIcon(lbIcon, file);
    }//GEN-LAST:event_btnChooseActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tbArticlesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbArticlesKeyReleased
        selectArticle();
    }//GEN-LAST:event_tbArticlesKeyReleased

    private void tbArticlesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbArticlesMouseClicked
        selectArticle();
    }//GEN-LAST:event_tbArticlesMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedArticle == null) {
            MessageUtils.showInformationMessage("INFO", "Please select an Article!");
            return;
        }

        if (!formValid()) {
            return;
        }

        try {

            if (!tfPicturePath.getText().trim().equals(selectedArticle.getPicturePath())) {
                if (Files.exists(Paths.get(selectedArticle.getPicturePath()))) {
                    Files.deleteIfExists(Paths.get(selectedArticle.getPicturePath()));
                }
                String localPath = uploadPicture();
                selectedArticle.setPicturePath(localPath);
            }

            selectedArticle.setTitle(tfTitle.getText().trim());
            selectedArticle.setLink(tfLink.getText().trim());
            selectedArticle.setDescription(taDescription.getText().trim());
            selectedArticle.setPublishedDate(LocalDateTime.parse(
                    tfPublishDate.getText().trim(),
                    Article.DATE_FORMATTER
            ));
            selectedArticle.setContent(taContent.getText().trim());

            /*Creator check*/
            String fullName = tfCreator.getText().trim();
            String[] nameParts = fullName.split(" ");

            if (nameParts.length >= 2) {
                String inputName = nameParts[0];
                String inputSurname = nameParts[1];

                List<Person> people = repository.selectPeople();

                for (Person person : people) {
                    if (person.getName().equalsIgnoreCase(inputName)
                            && person.getSurname().equalsIgnoreCase(inputSurname)) {
                        selectedArticle.setCreator(person);
                        break;
                    } else {
                        Person newPerson = new Person(inputName, inputSurname);
                        int idPerson = repository.createPerson(newPerson);
                        newPerson.setId(idPerson);
                        selectedArticle.setCreator(newPerson);
                        break;
                    }
                }
            }

            /* Contributor check */
            String contributorsText = tfContributors.getText().trim();

            List<Person> existingContributors = repository.getArticleContributors(selectedArticle.getId());
            List<Integer> existingContributorIds = existingContributors.stream()
                    .map(Person::getId)
                    .collect(Collectors.toList());

            List<Person> peopleInDb = repository.selectPeople();

            List<Person> newContributors = new ArrayList<>();
            List<Person> matchedContributors = new ArrayList<>();

            if (!contributorsText.isEmpty()) {
                String[] names = contributorsText.split(", ");

                for (String full_Name : names) {
                    String[] parts = full_Name.trim().split(" ");
                    if (parts.length >= 2) {
                        String name = parts[0];
                        String surname = parts[1];

                        Optional<Person> match = peopleInDb.stream()
                                .filter(p -> p.getName().equalsIgnoreCase(name)
                                && p.getSurname().equalsIgnoreCase(surname))
                                .findFirst();

                        if (match.isPresent()) {
                            matchedContributors.add(match.get());
                        } else {
                            newContributors.add(new Person(name, surname));
                        }
                    } else {
                        System.err.println("Invalid contributor name: " + full_Name);
                    }
                }
            }

            List<Integer> newContributorIds = repository.createPeople(newContributors);

            List<Integer> allNewIds = new ArrayList<>();
            allNewIds.addAll(matchedContributors.stream()
                    .map(Person::getId)
                    .collect(Collectors.toList()));
            allNewIds.addAll(newContributorIds);

            List<Integer> toRemove = new ArrayList<>(existingContributorIds);
            toRemove.removeAll(allNewIds);

            List<Integer> toAdd = new ArrayList<>(allNewIds);
            toAdd.removeAll(existingContributorIds);

            if (!toRemove.isEmpty()) {
                repository.deleteArticleContributor(selectedArticle.getId(), toRemove);
            }

            if (!toAdd.isEmpty()) {
                repository.insertArticleContributor(selectedArticle.getId(), toAdd);
            }

            List<Person> finalContributors = new ArrayList<>();

            for (Integer id : allNewIds) {
                repository.selectPerson(id).ifPresent(finalContributors::add);
            }

            selectedArticle.setContributors(finalContributors);

            repository.updateArticle(selectedArticle.getId(), selectedArticle);
            model.setArticles(repository.selectArticles());
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedArticle == null) {
            MessageUtils.showInformationMessage("INFO", "Please select an Article!");
            return;
        }

        try {

            if (Files.exists(Paths.get(selectedArticle.getPicturePath()))) {
                Files.deleteIfExists(Paths.get(selectedArticle.getPicturePath()));
            }

            List<Person> cont = repository.getArticleContributors(selectedArticle.getId());

            List<Integer> cont_Ids = cont.stream()
                    .map(Person::getId)
                    .collect(Collectors.toList());

            repository.deleteArticleContributor(selectedArticle.getId(), cont_Ids);
            repository.deleteArticle(selectedArticle.getId());
            model.setArticles(repository.selectArticles());
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void miSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSelectActionPerformed
        java.awt.Frame parent = (java.awt.Frame) javax.swing.SwingUtilities.getWindowAncestor(this);
        PersonSelectable personSelectable = (PersonSelectable) this;

        // Creator check
        Person creator = null;
        String fullName = tfCreator.getText().trim();
        String[] nameParts = fullName.split(" ");

        List<Person> creators = new ArrayList<>();

        if (nameParts.length >= 2) {
            String inputName = nameParts[0];
            String inputSurname = nameParts[1];

            List<Person> people;
            try {
                people = repository.selectPeople();

                Optional<Person> existing = people.stream()
                        .filter(p -> p.getName().equalsIgnoreCase(inputName)
                        && p.getSurname().equalsIgnoreCase(inputSurname))
                        .findFirst();

                if (existing.isPresent()) {
                    creator = existing.get();
                } else {
                    Person newPerson = new Person(inputName, inputSurname);
                    int idPerson = repository.createPerson(newPerson);
                    newPerson.setId(idPerson);
                    creator = newPerson;
                }

                creators.add(creator);

            } catch (Exception ex) {
                Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try {
            // Now pass both lists to the dialog
            new PeopleDragAndDrop(parent, true, personSelectable, creators).setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miSelectActionPerformed

    private void miExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExportActionPerformed
        List<Article> listA = null;
        try {
            listA = repository.selectArticles();
        } catch (Exception ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (listA != null) {
            try {
                JAXBUtils.save(new ArticleArchive(listA), "src/main/resources/articlearchive.xml");
            } catch (JAXBException ex) {
                Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            MessageUtils.showErrorMessage("Error", "Failed to export articles. See logs for details.");
        }
    }//GEN-LAST:event_miExportActionPerformed

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private Repository repository;
    private ArticleTableModel model;

    private Article selectedArticle;
    private ArrayList<Person> selectedPeople = new ArrayList();

    private void init() {
        try {
            initValidation();
            hideErrors();
            initRepository();
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbArticles.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbArticles.setAutoCreateRowSorter(true);
        tbArticles.setRowHeight(25);
        model = new ArticleTableModel(repository.selectArticles());
        tbArticles.setModel(model);
    }

    private void initValidation() {
        validationFields = Arrays.asList(
                tfTitle,
                tfLink,
                tfPublishDate,
                tfCreator,
                tfContributors,
                taDescription,
                taContent,
                tfPicturePath
        );
        errorLabels = Arrays.asList(
                lbTitleError,
                lbLinkError,
                lbDateError,
                lbCreatorError,
                lbContributorsError,
                lbDescriptionError,
                lbContentError,
                lbPicturePathError
        );
    }

    private void hideErrors() {
        errorLabels.forEach(e -> e.setVisible(false));
    }

    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());

            if ("DATE".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(
                            validationFields.get(i).getText().trim(),
                            Article.DATE_FORMATTER
                    );
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }
            }
        }
        return ok;
    }

    private void clearForm() {
        hideErrors();
        validationFields.forEach(e -> e.setText(""));
        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png")));
        selectedArticle = null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbContentError;
    private javax.swing.JLabel lbContributorsError;
    private javax.swing.JLabel lbCreatorError;
    private javax.swing.JLabel lbDateError;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbPicturePathError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JPopupMenu menuSelectPeople;
    private javax.swing.JMenuItem miExport;
    private javax.swing.JMenuItem miSelect;
    private javax.swing.JTextArea taContent;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbArticles;
    private javax.swing.JTextField tfContributors;
    private javax.swing.JTextField tfCreator;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPublishDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private String uploadPicture() throws IOException {
        String source = tfPicturePath.getText();
        String ext = source.substring(source.lastIndexOf("."));
        String name = UUID.randomUUID().toString() + ext;

        String destination = DIR + File.separator + name;

        FileUtils.copy(source, destination);

        return destination;
    }
    private static final String DIR = "assets";

    private void selectArticle() {
        int selectedRow = tbArticles.getSelectedRow();
        int rowIndex = tbArticles.convertRowIndexToModel(selectedRow);

        int id = (int) model.getValueAt(rowIndex, 0);

        try {
            Optional<Article> opt = repository.selectArticle(id);
            if (opt.isPresent()) {
                selectedArticle = opt.get();
                List<Person> neo = repository.getArticleContributors(id);
                selectedArticle.setContributors(neo);
                fillForm(selectedArticle);
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    private void fillForm(Article article) {
        tfTitle.setText(article.getTitle());
        tfLink.setText(article.getLink());
        tfPublishDate.setText(article.getPublishedDate().format(Article.DATE_FORMATTER));
        tfCreator.setText(article.getCreator().toString());

        List<Person> contributors = article.getContributors();
        String contributorsStr = contributors.stream()
                .map(p -> p.getName() + " " + p.getSurname())
                .collect(Collectors.joining(", "));

        tfContributors.setText(contributorsStr);
        taDescription.setText(article.getDescription());
        taContent.setText(article.getContent());
        if (article.getPicturePath().equals(null)) {
            tfPicturePath.setText(" ");
            lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png")));
        } else {
            tfPicturePath.setText(article.getPicturePath());
            setIcon(lbIcon, new File(article.getPicturePath()));
        }
    }

    public void setContent(String content) {
        taContent.setText(content);
    }

    @Override
    public boolean selectPerson(ArrayList<Person> person) {

        selectedPeople.clear();

        boolean addedSuccessfully = selectedPeople.addAll(person);

        if (addedSuccessfully) {
            if (selectedPeople.size() == 1) {
                Person creator = selectedPeople.get(0);
                tfCreator.setText(creator.getName() + " " + creator.getSurname());
            } else {
                List<Person> contributors = selectedPeople;
                String contributorsStr = contributors.stream()
                        .map(p -> p.getName() + " " + p.getSurname())
                        .collect(Collectors.joining(", "));

                tfContributors.setText(contributorsStr);
            }
            return true;
        } else {
            tfCreator.setText("");
            tfContributors.setText("");
            return false;
        }
    }
}
